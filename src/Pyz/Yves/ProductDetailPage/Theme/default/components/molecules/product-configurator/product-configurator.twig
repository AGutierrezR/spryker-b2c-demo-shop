{% extends model('component') %}

{% define config = {
    name: 'product-configurator',
    tag: 'section'
} %}

{% define data = {
    product: required,
    minQuantity: 1,
    maxQuantity: null,
    quantityInterval: 1,
    isBundle: null,
    bundleItems: [],
} %}

{% set productName = data.product.name | default %}
{% set sku = data.product.sku %}
{% set availabilityWidget = '' %}
{% set isProductConcrete = data.product.idProductConcrete is not empty %}
{% set isDisabled = data.product.idProductConcrete is empty or data.product.price is empty %}
{% set isProductAvailable = true %}

{% set isAvailable = data.product.idProductConcrete and data.product.available %}
{% set isDisabled = not isAvailable or isDisabled %}

{% set productDiscontinuedNoteWidget = findWidget('ProductDiscontinuedNoteWidget', [sku]) %}
{% if productDiscontinuedNoteWidget.isDiscontinued is not null %}
    {% set isDisabled = productDiscontinuedNoteWidget.isDiscontinued or isDisabled %}
    {% set isProductAvailable = not productDiscontinuedNoteWidget.isDiscontinued %}
{% endif %}

{% block body %}

    <h1 class="title title--product title--h2">{{productName}}</h1>

    <div class="grid grid--justify spacing-bottom spacing-bottom--bigger">
        {% widget 'ProductDetailPageReviewWidget' args [data.product.idProductAbstract] use view('pdp-review-rating', 'ProductReviewWidget') only %}{% endwidget %}
        {% widget 'ProductPriceVolumeWidget' args [data.product] only %}
        {% nowidget %}
            <div class="col text-right">
                {% include molecule('money-price') with {
                    modifiers: ['pdp'],
                    data: {
                        amount: data.product.price,
                        originalAmount: data.product.prices.ORIGINAL is not defined ? null : data.product.prices.ORIGINAL
                    }
                } only %}
            </div>
        {% endwidget %}
    </div>
    {% if data.isBundle != null %}
        {% embed molecule('toggler-item') with {
            modifiers: ['with-top-border', 'option'],
            data: {
                title: 'bundle.title' | trans,
                triggerClass: config.jsName ~ '__trigger-bundle',
                targetClass: config.jsName ~ '__target-bundle',
                isActive: true,
            },
            embed: {
                bundleItems: data.bundleItems,
            }
        } only %}
            {% block contentText %}
                {% include molecule('bundle-option-list', 'ProductDetailPage') with {
                    data: {
                        bundleItems: embed.bundleItems,
                    }
                } only %}
            {% endblock %}
        {% endembed %}
    {% endif %}
    {% widget 'ProductGroupWidget' args [data.product.idProductAbstract] use view('pdp-color-selector', 'ProductGroupWidget') only %}{% endwidget %}
    {% include molecule('variant-configurator', 'ProductDetailPage') with {
        data: {
            superAttributes: data.product.attributeMap.superAttributes,
            selectedAttributes: data.product.selectedAttributes,
            availableAttributes: data.product.availableAttributes
        }
    } only %}

    <form method="POST" action="{{ path("cart/add", {"sku": sku}) }}">
        {% widget 'ProductOptionConfiguratorWidget' args [data.product] only %}{% endwidget %}
        {% if not isDisabled %}
            {% embed molecule('toggler-item') with {
                modifiers: ['with-top-border', 'option'],
                data: {
                    title: 'cart.item_quantity' | trans,
                    isToggler: false,
                    minQuantity: data.product.quantityMin ?? 1,
                    maxQuantity: data.product.quantityMax,
                    quantityInterval: data.product.quantityInterval ?? 1,
                    value: data.minQuantity,
                }
            } only %}
                {% block contentText %}
                    {% include molecule('quantity-counter') with {
                        modifiers: ['quantity-large', 'no-spacing'],
                        data: {
                            readOnly: true,
                            minQuantity: data.minQuantity,
                            maxQuantity: data.maxQuantity,
                            quantityInterval: data.quantityInterval,
                            value: data.minQuantity,
                        }
                    } only %}
                {% endblock %}
            {% endembed %}
        {% else %}
            <input type="hidden" class="js-volume-price__quantity"/>
        {% endif %}

        {% include molecule('availability-product', 'AvailabilityWidget') ignore missing with {
            data: {
                idProductConcrete: data.product.idProductConcrete,
                isAvailable: data.product.available
            }
        } only %}

        {% widget 'ProductDiscontinuedNoteWidget' args [data.product.sku] only %}{% endwidget %}

        <div class="{{ config.name }}__button-wrap">
            <button type="submit" class="button button--large button--expand {{ config.jsName ~ '__button' }}" {{ isDisabled ? 'disabled' : '' }} {{qa('add-to-cart-button')}}>
                {{ 'page.detail.add-to-cart' | trans }}
            </button>
            {% include molecule('action-single-click-enforcer') with {
                attributes: {
                    'target-selector': '.' ~ config.jsName ~ '__button'
                }
            } only %}
        </div>
    </form>

    {% if not isAvailable and isProductConcrete %}
        {% widget 'AvailabilityNotificationSubscriptionWidget' args [data.product] only %}{% endwidget %}
    {% endif %}

    {% if can('SeeWishlistPermissionPlugin') and isProductAvailable %}
        {% include molecule('wishlist-selector-for-pdp', 'WishlistWidget') ignore missing with {
            data: {
                sku: data.product.sku,
                idProductConcrete: data.product.idProductConcrete | default
            }
        } only %}
    {% endif %}
{% endblock %}
