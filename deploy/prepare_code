#!/bin/bash
#
# *** Project-A deployment
#
# configure_shared_links
# This script is executed only on a deployment host (as user root), after checking out code from scm repository.
# It should create links to shared directories, as well as any other links (configuration, data).
# If any type of code building is needed (like fetching external libraries or compling), it should be done here.
#
# This script should write only to $deploy_source_dir
# Contents of $deploy_source_dir will be afterwards put into tarball and distributed among all application hosts.
#

FILEPATH=`pwd`/$0; BASEDIR=`dirname $FILEPATH`; source $BASEDIR/vars; source $BASEDIR/functions
outfile=`mktemp /tmp/deploy-XXXXXX`

cd $deploy_source_dir
size=`du -sh . | awk '{print $1}'`
echo "Source code revision: ${revision}, size: ${size}B - starting build process:"

if is_default_store; then
  rm -rf data; ln -sf $shared_dir/data data
  rm -rf src/Generated
  rm -f config/Shared/config_local.php; ln -sf $shared_dir/config_local.php config/Shared/config_local.php

  # Create symlink for database dumps
  ln -sf $shared_dir/data/static static/public/Zed/static
fi

rm -f config/config_local_${APPLICATION_STORE}.php; ln -sf $shared_dir/config_local_${APPLICATION_STORE}.php config/Shared/config_local_${APPLICATION_STORE}.php

### Composer
if is_default_store; then
  echo " - composer install"
  # Prepare and get cache contents
  composer_cache_dir=/data/deploy/${environment}/vendor
  [ ! -d $composer_cache_dir ] && mkdir -p $composer_cache_dir
  cp -r $composer_cache_dir ./

  php -d "newrelic.appname='Deploy($environment)'" composer.phar self-update &> /dev/null
  if [ "${environment}" == "production" ]; then
    php -d "newrelic.appname='Deploy($environment)'" composer.phar --quiet install -o --no-dev || exit 1
  else
    php -d "newrelic.appname='Deploy($environment)'" composer.phar --quiet install -o || exit 1
  fi

  # rsync current vendor back to the cache
  rsync -ra --delete vendor/ $composer_cache_dir/

  # Log used packages version in renepro repository
  curl -s -XPUT -d @composer.lock http://renepro.project-a.com/deploy.php?hostname=`hostname`\\\&environment=$environment | grep -v 'logged'
fi

## Get "Generated" dir from cache
if is_default_store; then
  generated_cache_dir=/data/deploy/${environment}/Generated
  [ ! -d $generated_cache_dir ] && mkdir -p $generated_cache_dir
  cp -r $generated_cache_dir src/
  rm -rf src/Generated/Zed/PropelGen
fi

chown -R www-data. .

## ZED - Execute install.php
echo " - propel setup"
APPLICATION_ENV=$environment sudo -E -u www-data php -d "newrelic.appname='Deploy($environment)'" vendor/bin/console setup:propel:install -s ${APPLICATION_STORE} -e ${environment} &> $outfile
if [ $? -ne 0 ]; then
  echo "!!! FATAL: There was an error in console setup:propel:install"
  cat $outfile
  exit 1
fi

### Generate Code
if is_default_store; then
  echo " - generate code"
  APPLICATION_ENV=$environment sudo -E -u www-data php -d "newrelic.appname='Deploy($environment)'" vendor/bin/console setup:generate &> $outfile
  if [ $? -ne 0 ]; then
    echo "!!! FATAL: There was an error in console setup:generate"
    cat $outfile
    exit 2
  fi
fi

### Save the "Generated" dir back in cache
rsync -ra --delete src/Generated/ $generated_cache_dir

### node.js, Grunt
if is_default_store; then
  echo " - node.js package manager"
  if [ -z `which npm` ]; then
    echo "Warning: npm not available. Node.js and npm is required for grunt."
    exit 1
  fi

  # Prepare and get cache contents
  npm_cache_dir=/data/deploy/${environment}/node_modules
  [ ! -d $npm_cache_dir ] && mkdir -p $npm_cache_dir
  cp -r $npm_cache_dir ./

  # Install node dependencies
  export PATH=${PATH}:/var/lib/gems/1.8/bin
  npm install --silent # >> /dev/null || exit 1
  [ -z `which grunt` ] && npm install -g grunt-cli

  # rsync node_modules back to cache
  rsync -ra --delete node_modules/ $npm_cache_dir

  # Run grunt deployment tasks
  for app in Yves Zed; do
    echo " - grunt dist: $app"
    grunt dist -gruntfile config/$app/Gruntfile.js >> $outfile
    if [ $? -ne 0 ]; then
      echo "!!! FATAL: grunt failed"
      cat $outfile
      echo " --- to force deployment with failing grunt, edit deploy/prepare_code file ---"
      ###
      ### Remove (or comment out) next line to ignore grunt errors during deployment.
      ### this shouls be used as hotfix only
      ###
      exit 2
    fi
  done
fi

### Allright, no error, deployment continues.
rm -f $outfile
exit 0
